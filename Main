

import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.io.OutputStream;
import java.io.StringWriter;
import java.security.MessageDigest;
import java.security.NoSuchAlgorithmException;
import java.util.Base64;
import java.util.HashSet;
import java.util.Set;
import java.util.zip.ZipEntry;
import java.util.zip.ZipOutputStream;
import java.io.BufferedReader;
import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.ByteArrayInputStream;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.IOException;
import java.security.MessageDigest;
import java.security.NoSuchAlgorithmException;

import org.apache.http.Header;
import org.apache.http.HttpEntity;
import org.apache.http.HttpResponse;
import org.apache.http.client.HttpClient;
import org.apache.http.client.methods.HttpDelete;
import org.apache.http.client.methods.HttpGet;
import org.apache.http.client.methods.HttpPatch;
import org.apache.http.client.methods.HttpPost;
import org.apache.http.entity.InputStreamEntity;
import org.apache.http.entity.StringEntity;
import org.apache.http.message.BasicHeader;
import org.apache.http.impl.client.HttpClientBuilder;
import org.apache.http.HttpStatus;
import org.apache.http.util.EntityUtils;
import org.apache.http.client.ClientProtocolException;
import org.json.JSONObject;
import org.json.JSONArray;
import org.json.JSONTokener;
import org.json.JSONException;
 
public class OneOffProcess
{
		static final int ONE_MB = 1024 * 1024;
    static final String USERNAME     = "nagasai@absyz.com";
    static final String PASSWORD     = "SEG-automotive.75MYejHe7rAim5a4wo3jSxXRG5d";
    static final String LOGINURL     = "https://test.salesforce.com";
    static final String GRANTSERVICE = "/services/oauth2/token?grant_type=password";
    static final String CLIENTID     = "3MVG9qQjGkWUbcrGNuUbReMq9iP19gRlr0qpoyXGpYAFicWw7FqfdW2E9UyN_FaQIVxkvWdLOariE6b7qBveM";
    static final String CLIENTSECRET = "CEE48A09BA27B8CCCC2647D75BD2E5B4DD41528286664746BE69BFC741D0A7C0";
    private static String REST_ENDPOINT = "/services/data" ;
    private static String API_VERSION = "/v32.0" ;
    private static String baseUri;
    private static Header oauthHeader;
    private static Header prettyPrintHeader = new BasicHeader("X-PrettyPrint", "1");
  //file vars
    public static  ByteArrayOutputStream baos;
    public static ZipOutputStream zipOut;
    public static byte[] bytes1;
     public static   String encodedBase64;
     public static InputStream fis;
     public static   HttpEntity myEntity;
     
    public static String requestid;
	public static String requestname;
    private static String loginInstanceUrl = null;
	public static int recordsprocessed=0;
    public static void main(String[] args) throws InterruptedException {
 
        HttpClient httpclient = HttpClientBuilder.create().build();
 
        // Assemble the login request URL
        String loginURL = LOGINURL +
                          GRANTSERVICE +
                          "&client_id=" + CLIENTID +
                          "&client_secret=" + CLIENTSECRET +
                          "&username=" + USERNAME +
                          "&password=" + PASSWORD;
 
        // Login requests must be POSTs
        HttpPost httpPost = new HttpPost(loginURL);
        HttpResponse response = null;
 
        try {
            // Execute the login POST request
            response = httpclient.execute(httpPost);
        } catch (ClientProtocolException cpException) {
            cpException.printStackTrace();
        } catch (IOException ioException) {
            ioException.printStackTrace();
        }
 
        // verify response is HTTP OK
        final int statusCode = response.getStatusLine().getStatusCode();
        if (statusCode != HttpStatus.SC_OK) {
            System.out.println("Error authenticating to Force.com: "+statusCode);
            // Error is in EntityUtils.toString(response.getEntity())
            return;
        }
 
        String getResult = null;
        try {
            getResult = EntityUtils.toString(response.getEntity());
        } catch (IOException ioException) {
            ioException.printStackTrace();
        }
 
        JSONObject jsonObject = null;
        String loginAccessToken = null;
        
 
        try {
            jsonObject = (JSONObject) new JSONTokener(getResult).nextValue();
            loginAccessToken = jsonObject.getString("access_token");
            loginInstanceUrl = jsonObject.getString("instance_url");
        } catch (JSONException jsonException) {
            jsonException.printStackTrace();
        }
 
        baseUri = loginInstanceUrl + REST_ENDPOINT + API_VERSION ;
        oauthHeader = new BasicHeader("Authorization", "OAuth " + loginAccessToken) ;
        System.out.println("oauthHeader1: " + oauthHeader);
        System.out.println("\n" + response.getStatusLine());
        System.out.println("Successful login");
        System.out.println("instance URL: "+loginInstanceUrl);
        System.out.println("access token/session ID: "+loginAccessToken);
        System.out.println("baseUri: "+ baseUri);        
 
        // Run codes to query, isnert, update and delete records in Salesforce using REST API
        querycontentversionids();
               
 
        // release connection
        httpPost.releaseConnection();
    }
    
    
   
    
    // Query Leads using REST HttpGet
    public static void querycontentversionids() throws InterruptedException {
        System.out.println("\n_______________ version QUERY _______________");
        try {
 
            //Set up the HTTP objects needed to make the request.
            HttpClient httpClient = HttpClientBuilder.create().build();
            
          
           
            String uri = baseUri + "/query?q=Select+id+,+Attachment_CRC_Values__c+,+name+From+IFv2_Request__c+where+Consider_For_Zipping_or_glacier__c+=+'considerforzipping'+limit+1";
            System.out.println("Query URL: " + uri);
          
            HttpGet httpGet = new HttpGet(uri);
            System.out.println("oauthHeader2: " + oauthHeader);
            httpGet.addHeader(oauthHeader);
            httpGet.addHeader(prettyPrintHeader);
 
            // Make the request.
            HttpResponse response = httpClient.execute(httpGet);
  
            // Process the result
            int statusCode = response.getStatusLine().getStatusCode();
            if (statusCode == 200) {
                String response_string = EntityUtils.toString(response.getEntity());
                try {
                    JSONObject json = new JSONObject(response_string);
                    System.out.println("JSON result of Query:\n" + json.toString(1));
                    JSONArray j = json.getJSONArray("records");
                    for (int i = 0; i < j.length(); i++){
                    	String contentversionidset;
                    	contentversionidset=json.getJSONArray("records").getJSONObject(i).getString("Attachment_CRC_Values__c");
                       requestid = json.getJSONArray("records").getJSONObject(i).getString("Id");
                      requestname= json.getJSONArray("records").getJSONObject(i).getString("Name");
                        // System.out.println("Lead record is: " + i + ". " + Title + " " + Versiondata);
                    String k=	contentversionidset.replace("&#39;","'");
                    System.out.println("vids"+k);
                    	querycontentversions(k);
                        // querycontentversions();
                    }
                } catch (JSONException je) {
                    je.printStackTrace();
                }
            } else {
                System.out.println("Query was unsuccessful. Status code returned is " + statusCode);
                System.out.println("An error has occured. Http status: " + response.getStatusLine().getStatusCode());
                System.out.println(getBody(response.getEntity().getContent()));
                System.exit(-1);
            }
        } catch (IOException ioe) {
            ioe.printStackTrace();
        } catch (NullPointerException npe) {
            npe.printStackTrace();
        }
    }

    
    
    
   
   
    // Query Leads using REST HttpGet
    public static void querycontentversions(String contentversionidset) throws InterruptedException {
        System.out.println("\n_______________ Lead QUERY _______________");
        try {
        	 System.out.println("contentversionidset" + contentversionidset);
            //Set up the HTTP objects needed to make the request.
            HttpClient httpClient = HttpClientBuilder.create().build();
              String Title ;
              String contenturl;
 
            String uri = baseUri + "/query?q=Select+title+,+versiondata+From+contentversion+where+id+in"+contentversionidset;
            System.out.println("contentversionQuery URL: " + uri);
            HttpGet httpGet = new HttpGet(uri);
            
            System.out.println("oauthHeader2: " + oauthHeader);
            httpGet.addHeader(oauthHeader);
            httpGet.addHeader(prettyPrintHeader);
 
            // Make the request.
            HttpResponse response = httpClient.execute(httpGet);
            
            // Process the result
            int statusCode = response.getStatusLine().getStatusCode();
            if (statusCode == 200) {
                String response_string = EntityUtils.toString(response.getEntity());
                try {
                    JSONObject json = new JSONObject(response_string);
                    System.out.println("JSON result of Query:\n" + json.toString(1));
                    JSONArray j = json.getJSONArray("records");
                   
                   baos = new ByteArrayOutputStream(); 
                    zipOut = new ZipOutputStream(baos);
                    for (int i = 0; i < j.length(); i++){
                        Title = json.getJSONArray("records").getJSONObject(i).getString("Title");
                        contenturl = json.getJSONArray("records").getJSONObject(i).getString("VersionData");
                         System.out.println("Lead record is: " + i + ". " + Title + " " + contenturl);
                         querybody(contenturl,Title);
                         
                         
                         
                         
                         
                         
                     }
                    zipOut.close();
                    baos.close();
                    zipOut.flush();
                    baos.flush();
                    //
                      bytes1 = baos.toByteArray();
                 encodedBase64 = new String(Base64.getEncoder().encodeToString(bytes1));
                  uri = loginInstanceUrl+"/services/data/v39.0/sobjects/Attachment";
             	
            	  httpClient = HttpClientBuilder.create().build();
            	    HttpPost httpPost = new HttpPost(uri);
            	    httpPost.setHeader("Content-type", "application/json");
            	  
            	    httpPost.addHeader(oauthHeader);
                 JSONObject obj = new JSONObject();

     	        obj.put("Name",requestname+".zip");
     	        obj.put("Body",encodedBase64);
     	        obj.put("parentid",requestid);
     	       

     	      // String jsonstring  = obj.toString();
     	      //jsonstring=null;
     	      //System.gc();
     	      //jsonstring=null;
     	       /*obj.valueToString(obj);
     	        String jsonstring  = obj.toString();
     	       jsonstring=null;
     	       obj=null;
     	       
     	        
     	       
     	       StringEntity stringEntity = new StringEntity(obj.toString());
     	        httpPost.getRequestLine();
     	        httpPost.setEntity(stringEntity);

     	        HttpResponse response =  httpClient.execute(httpPost);*/
     	      // StringEntity stringEntity = new StringEntity(obj.toString());
     	      
     	     // InputStream stream = new ByteArrayInputStream(obj.toString().getBytes("UTF-8"));
     	      httpPost.getRequestLine();
     	        httpPost.setEntity(new StringEntity(obj.toString()));
     	      
     	         //response =  httpClient.execute(httpPost);
     	        obj=null;
     	       httpPost=null;
                bytes1=null;
                baos.reset();
                encodedBase64=null;
                 fis=null;
                myEntity=null;
                System.gc();
                //nextiteration starts
                //querycontentversionids();
                updaterequest();
                  // createcontentversion();
                   
                } catch (JSONException je) {
                    je.printStackTrace();
                }
            } else {
                System.out.println("Query was unsuccessful. Status code returned is " + statusCode);
                System.out.println("An error has occured. Http status: " + response.getStatusLine().getStatusCode());
                System.out.println(getBody(response.getEntity().getContent()));
                System.exit(-1);
            }
        } catch (IOException ioe) {
            ioe.printStackTrace();
        } catch (NullPointerException npe) {
            npe.printStackTrace();
        }
    }

    
    
    
    
    // query Leads using REST HttpPost
    
    public static void querybody(String contenturl,String title) throws InterruptedException {
    	System.out.println("\n_______________ contetnversion QUERY _______________");
        try {
 
            //Set up the HTTP objects needed to make the request.
            HttpClient httpClient = HttpClientBuilder.create().build();
 
            String uri = loginInstanceUrl+contenturl;
            System.out.println("Query URL: " + uri);
            HttpGet httpGet = new HttpGet(uri);
           
            System.out.println("oauthHeader2: " + oauthHeader);
            httpGet.addHeader(oauthHeader);
            httpGet.addHeader(prettyPrintHeader);
            
            httpGet.addHeader("Content-type", "application/octet-stream");
            // Make the request.
            HttpResponse response = httpClient.execute(httpGet);
            
            // Process the result
            int statusCode = response.getStatusLine().getStatusCode();
             myEntity = response.getEntity();
             fis = myEntity.getContent(); 
            if (statusCode == 200) {
            	
                try {
                	// FileOutputStream fos = new FileOutputStream("D:\\comp.zip");
                	 
                	 
                	
                	 
                	 ZipEntry zipEntry = new ZipEntry(title);
                	 long hSize = Runtime.getRuntime().totalMemory();
                	 System.out.println("heapsize"+hSize);
                	
                     zipOut.putNextEntry(zipEntry);
                     byte[] bytes = new byte[1024];
                     int length;
                    // fis.o
                     while((length = fis.read(bytes)) >= 0) {
                         zipOut.write(bytes, 0, length);
                     }
                   
                   
                
                    
                } catch (JSONException je) {
                    je.printStackTrace();
                }
                finally {
                	fis.close();
                	//fis.reset();
                	 httpGet.releaseConnection();
                	 Runtime.getRuntime().runFinalization();
                	 Runtime.getRuntime().gc();
                	 System.gc();
                	 Thread.sleep(2000);
                	 //myEntity.
                }
            } else {
                //System.out.println("Query was unsuccessful. Status code returned is " + statusCode);
                //System.out.println("An error has occured. Http status: " + response.getStatusLine().getStatusCode());
               // System.out.println(getBody(response.getEntity().getContent()));
                System.exit(-1);
            }
        } catch (IOException ioe) {
            ioe.printStackTrace();
        } catch (NullPointerException npe) {
            npe.printStackTrace();
        }
        
    }
 
    public static void createcontentversion() {
    	 String uri = loginInstanceUrl+"/services/data/v39.0/sobjects/Attachment";
    	
    	 HttpClient httpClient = HttpClientBuilder.create().build();
    	    HttpPost httpPost = new HttpPost(uri);
    	    httpPost.setHeader("Content-type", "application/json");
    	  
    	    httpPost.addHeader(oauthHeader);
    	    try {
    	    	JSONObject obj = new JSONObject();

    	        obj.put("Name",requestname+".zip");
    	        obj.put("Body",encodedBase64);
    	        obj.put("parentid",requestid);
    	       

    	     
    	            	        obj.valueToString(obj);
    	        String jsonstring  = obj.toString();
    	        //obj.writeJSONString(out);
    	        
    	       
    	        StringEntity stringEntity = new StringEntity(jsonstring);
    	        httpPost.getRequestLine();
    	        httpPost.setEntity(stringEntity);

    	        HttpResponse response =  httpClient.execute(httpPost);
    	        obj.remove("Body");
    	        encodedBase64 = null;
    	        obj = null;
    	        bytes1=null;
    	        updaterequest();
    	        int statusCode = response.getStatusLine().getStatusCode();
    	        
    	        if (statusCode == 200) {
                	
                    try {
                    	
                        
                         System.out.println("zipOut"); 
                                            //JSONObject json = new JSONObject(response_string);
                       // System.out.println("JSON result of Query:\n" + json.toString(1));
                       // JSONArray j = json.getJSONArray("records");
                         
                    } catch (JSONException je) {
                        je.printStackTrace();
                    }
                } else {
                   // System.out.println("Query was unsuccessful. Status code returned is " + statusCode);
                   // System.out.println("An error has occured. Http status: " + response.getStatusLine().getStatusCode());
                    System.out.println(getBody(response.getEntity().getContent()));
                    System.exit(-1);
                }
     
    	        
    	    } catch (Exception e) {
    	        throw new RuntimeException(e);
    	    }
    }
    public static void updaterequest() throws InterruptedException {
        System.out.println("\n_______________ request UPDATE _______________");
 
        //Notice, the id for the record to update is part of the URI, not part of the JSON
        String uri = baseUri + "/sobjects/IFv2_Request__c/" + requestid;
        try {
            //Create the JSON object containing the updated lead last name
            //and the id of the lead we are updating.
            JSONObject request = new JSONObject();
            request.put("Consider_For_Zipping_or_glacier__c", "considerforGlacier");
		
			
            System.out.println("JSON for update of request record:\n" + request.toString(1));
 
            //Set up the objects necessary to make the request.
            //DefaultHttpClient httpClient = new DefaultHttpClient();
            HttpClient httpClient = HttpClientBuilder.create().build();
 
            HttpPatch httpPatch = new HttpPatch(uri);
            httpPatch.addHeader(oauthHeader);
            httpPatch.addHeader(prettyPrintHeader);
            StringEntity body = new StringEntity(request.toString(1));
            body.setContentType("application/json");
            httpPatch.setEntity(body);
 
            //Make the request
            HttpResponse response = httpClient.execute(httpPatch);
 
            //Process the response
            int statusCode = response.getStatusLine().getStatusCode();
            if (statusCode == 204) {
                System.out.println("Updated the request successfully.");
                
                System.gc();
				recordsprocessed++;
				 System.out.println("recordsprocessed"+recordsprocessed);
                querycontentversionids();
                System.exit(0);
            } else {
                System.out.println("request update NOT successfully. Status code is " + statusCode);
            }
        } catch (JSONException e) {
            System.out.println("Issue creating JSON or processing results");
            e.printStackTrace();
        } catch (IOException ioe) {
            ioe.printStackTrace();
        } catch (NullPointerException npe) {
            npe.printStackTrace();
        }
    }
 
 
    private static String getBody(InputStream inputStream) {
        String result = "";
        try {
            BufferedReader in = new BufferedReader(
                    new InputStreamReader(inputStream)
            );
            String inputLine;
            while ( (inputLine = in.readLine() ) != null ) {
                result += inputLine;
                result += "\n";
            }
            in.close();
        } catch (IOException ioe) {
            ioe.printStackTrace();
        }
       // System.out.println("result" + result);
        return result;
    }
    
   
    
    
    
}
