package Salesforce_Rest;

import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.io.OutputStream;
import java.io.StringWriter;
import java.security.MessageDigest;
import java.security.NoSuchAlgorithmException;
import java.util.Base64;
import java.util.HashSet;
import java.util.Set;
import java.util.zip.ZipEntry;
import java.util.zip.ZipOutputStream;
import java.io.BufferedReader;
import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.ByteArrayInputStream;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.IOException;
import java.security.MessageDigest;
import java.security.NoSuchAlgorithmException;

import org.apache.http.Header;
import org.apache.http.HttpEntity;
import org.apache.http.HttpResponse;
import org.apache.http.client.HttpClient;
import org.apache.http.client.methods.HttpDelete;
import org.apache.http.client.methods.HttpGet;
import org.apache.http.client.methods.HttpPost;
import org.apache.http.entity.InputStreamEntity;
import org.apache.http.entity.StringEntity;
import org.apache.http.message.BasicHeader;
import org.apache.http.impl.client.HttpClientBuilder;
import org.apache.http.HttpStatus;
import org.apache.http.util.EntityUtils;
import org.apache.http.client.ClientProtocolException;
import org.json.JSONObject;
import org.json.JSONArray;
import org.json.JSONTokener;
import org.json.JSONException;
 
public class Main {
	static final int ONE_MB = 1024 * 1024;
    static final String USERNAME     = "nagasai@absyz.com";
    static final String PASSWORD     = "SEG-automotive.75MYejHe7rAim5a4wo3jSxXRG5d";
    static final String LOGINURL     = "https://test.salesforce.com";
    static final String GRANTSERVICE = "/services/oauth2/token?grant_type=password";
    static final String CLIENTID     = "3MVG9qQjGkWUbcrGNuUbReMq9iP19gRlr0qpoyXGpYAFicWw7FqfdW2E9UyN_FaQIVxkvWdLOariE6b7qBveM";
    static final String CLIENTSECRET = "CEE48A09BA27B8CCCC2647D75BD2E5B4DD41528286664746BE69BFC741D0A7C0";
    private static String REST_ENDPOINT = "/services/data" ;
    private static String API_VERSION = "/v32.0" ;
    private static String baseUri;
    private static Header oauthHeader;
    private static Header prettyPrintHeader = new BasicHeader("X-PrettyPrint", "1");
  public static  ByteArrayOutputStream baos;
  public static ZipOutputStream zipOut;
	public static String requestid;
	public static String requestname;
    private static String loginInstanceUrl = null;
    public static void main(String[] args) {
 
        HttpClient httpclient = HttpClientBuilder.create().build();
 
        // Assemble the login request URL
        String loginURL = LOGINURL +
                          GRANTSERVICE +
                          "&client_id=" + CLIENTID +
                          "&client_secret=" + CLIENTSECRET +
                          "&username=" + USERNAME +
                          "&password=" + PASSWORD;
 
        // Login requests must be POSTs
        HttpPost httpPost = new HttpPost(loginURL);
        HttpResponse response = null;
 
        try {
            // Execute the login POST request
            response = httpclient.execute(httpPost);
        } catch (ClientProtocolException cpException) {
            cpException.printStackTrace();
        } catch (IOException ioException) {
            ioException.printStackTrace();
        }
 
        // verify response is HTTP OK
        final int statusCode = response.getStatusLine().getStatusCode();
        if (statusCode != HttpStatus.SC_OK) {
            System.out.println("Error authenticating to Force.com: "+statusCode);
            // Error is in EntityUtils.toString(response.getEntity())
            return;
        }
 
        String getResult = null;
        try {
            getResult = EntityUtils.toString(response.getEntity());
        } catch (IOException ioException) {
            ioException.printStackTrace();
        }
 
        JSONObject jsonObject = null;
        String loginAccessToken = null;
        
 
        try {
            jsonObject = (JSONObject) new JSONTokener(getResult).nextValue();
            loginAccessToken = jsonObject.getString("access_token");
            loginInstanceUrl = jsonObject.getString("instance_url");
        } catch (JSONException jsonException) {
            jsonException.printStackTrace();
        }
 
        baseUri = loginInstanceUrl + REST_ENDPOINT + API_VERSION ;
        oauthHeader = new BasicHeader("Authorization", "OAuth " + loginAccessToken) ;
        System.out.println("oauthHeader1: " + oauthHeader);
        System.out.println("\n" + response.getStatusLine());
        System.out.println("Successful login");
        System.out.println("instance URL: "+loginInstanceUrl);
        System.out.println("access token/session ID: "+loginAccessToken);
        System.out.println("baseUri: "+ baseUri);        
 
        // Run codes to query, isnert, update and delete records in Salesforce using REST API
        querycontentversionids();
               
 
        // release connection
        httpPost.releaseConnection();
    }
    
    
    public static void getsessionid() {
    	 HttpClient httpclient = HttpClientBuilder.create().build();
    	 
         // Assemble the login request URL
         String loginURL = LOGINURL +
                           GRANTSERVICE +
                           "&client_id=" + CLIENTID +
                           "&client_secret=" + CLIENTSECRET +
                           "&username=" + USERNAME +
                           "&password=" + PASSWORD;
  
         // Login requests must be POSTs
         HttpPost httpPost = new HttpPost(loginURL);
         HttpResponse response = null;
  
         try {
             // Execute the login POST request
             response = httpclient.execute(httpPost);
         } catch (ClientProtocolException cpException) {
             cpException.printStackTrace();
         } catch (IOException ioException) {
             ioException.printStackTrace();
         }
  
         // verify response is HTTP OK
         final int statusCode = response.getStatusLine().getStatusCode();
         if (statusCode != HttpStatus.SC_OK) {
             System.out.println("Error authenticating to Force.com: "+statusCode);
             // Error is in EntityUtils.toString(response.getEntity())
             return;
         }
  
         String getResult = null;
         try {
             getResult = EntityUtils.toString(response.getEntity());
         } catch (IOException ioException) {
             ioException.printStackTrace();
         }
  
         JSONObject jsonObject = null;
         String loginAccessToken = null;
         
  
         try {
             jsonObject = (JSONObject) new JSONTokener(getResult).nextValue();
             loginAccessToken = jsonObject.getString("access_token");
             loginInstanceUrl = jsonObject.getString("instance_url");
         } catch (JSONException jsonException) {
             jsonException.printStackTrace();
         }
  
         baseUri = loginInstanceUrl + REST_ENDPOINT + API_VERSION ;
         oauthHeader = new BasicHeader("Authorization", "OAuth " + loginAccessToken) ;
         System.out.println("oauthHeader1: " + oauthHeader);
         System.out.println("\n" + response.getStatusLine());
         System.out.println("Successful login");
         System.out.println("instance URL: "+loginInstanceUrl);
         System.out.println("access token/session ID: "+loginAccessToken);
         System.out.println("baseUri: "+ baseUri);        
  
         // Run codes to query, isnert, update and delete records in Salesforce using REST API
        
                
  
         // release connection
         httpPost.releaseConnection();
    	
    }
    
    // Query Leads using REST HttpGet
    public static void querycontentversionids() {
        System.out.println("\n_______________ version QUERY _______________");
        try {
 
            //Set up the HTTP objects needed to make the request.
            HttpClient httpClient = HttpClientBuilder.create().build();
            
          
           
            String uri = baseUri + "/query?q=Select+id+,+Attachment_CRC_Values__c+,+name+From+IFv2_Request__c+where+id+=+'a2A0D0000001ezD'";
            System.out.println("Query URL: " + uri);
          
            HttpGet httpGet = new HttpGet(uri);
            System.out.println("oauthHeader2: " + oauthHeader);
            httpGet.addHeader(oauthHeader);
            httpGet.addHeader(prettyPrintHeader);
 
            // Make the request.
            HttpResponse response = httpClient.execute(httpGet);
  
            // Process the result
            int statusCode = response.getStatusLine().getStatusCode();
            if (statusCode == 200) {
                String response_string = EntityUtils.toString(response.getEntity());
                try {
                    JSONObject json = new JSONObject(response_string);
                    System.out.println("JSON result of Query:\n" + json.toString(1));
                    JSONArray j = json.getJSONArray("records");
                    for (int i = 0; i < j.length(); i++){
                    	String contentversionidset;
                    	contentversionidset=json.getJSONArray("records").getJSONObject(i).getString("Attachment_CRC_Values__c");
                       requestid = json.getJSONArray("records").getJSONObject(i).getString("Id");
                      requestname= json.getJSONArray("records").getJSONObject(i).getString("Name");
                        // System.out.println("Lead record is: " + i + ". " + Title + " " + Versiondata);
                    String k=	contentversionidset.replace("&#39;","'");
                    System.out.println("vids"+k);
                    	querycontentversions(k);
                        // querycontentversions();
                    }
                } catch (JSONException je) {
                    je.printStackTrace();
                }
            } else {
                System.out.println("Query was unsuccessful. Status code returned is " + statusCode);
                System.out.println("An error has occured. Http status: " + response.getStatusLine().getStatusCode());
                System.out.println(getBody(response.getEntity().getContent()));
                System.exit(-1);
            }
        } catch (IOException ioe) {
            ioe.printStackTrace();
        } catch (NullPointerException npe) {
            npe.printStackTrace();
        }
    }

    
    
    
   
    
    
 
    // Query Leads using REST HttpGet
    public static void querycontentversions(String contentversionidset) {
        System.out.println("\n_______________ Lead QUERY _______________");
        try {
        	 System.out.println("contentversionidset" + contentversionidset);
            //Set up the HTTP objects needed to make the request.
            HttpClient httpClient = HttpClientBuilder.create().build();
              String Title ;
              String contenturl;
 
            String uri = baseUri + "/query?q=Select+title+,+versiondata+From+contentversion+where+id+in"+contentversionidset;
            System.out.println("contentversionQuery URL: " + uri);
            HttpGet httpGet = new HttpGet(uri);
            
            System.out.println("oauthHeader2: " + oauthHeader);
            httpGet.addHeader(oauthHeader);
            httpGet.addHeader(prettyPrintHeader);
 
            // Make the request.
            HttpResponse response = httpClient.execute(httpGet);
 
            // Process the result
            int statusCode = response.getStatusLine().getStatusCode();
            if (statusCode == 200) {
                String response_string = EntityUtils.toString(response.getEntity());
                try {
                    JSONObject json = new JSONObject(response_string);
                    System.out.println("JSON result of Query:\n" + json.toString(1));
                    JSONArray j = json.getJSONArray("records");
                   baos = new ByteArrayOutputStream(); 
                    zipOut = new ZipOutputStream(baos);
                    for (int i = 0; i < j.length(); i++){
                        Title = json.getJSONArray("records").getJSONObject(i).getString("Title");
                        contenturl = json.getJSONArray("records").getJSONObject(i).getString("VersionData");
                         System.out.println("Lead record is: " + i + ". " + Title + " " + contenturl);
                         querybody(contenturl,Title);
                         
                         
                         
                         
                         
                         
                     }
                    zipOut.close();
                     byte[] bytes1 = baos.toByteArray();
                String encodedBase64 = new String(Base64.getEncoder().encodeToString(bytes1));
                   createcontentversion(encodedBase64);
                    
                } catch (JSONException je) {
                    je.printStackTrace();
                }
            } else {
                System.out.println("Query was unsuccessful. Status code returned is " + statusCode);
                System.out.println("An error has occured. Http status: " + response.getStatusLine().getStatusCode());
                System.out.println(getBody(response.getEntity().getContent()));
                System.exit(-1);
            }
        } catch (IOException ioe) {
            ioe.printStackTrace();
        } catch (NullPointerException npe) {
            npe.printStackTrace();
        }
    }

    
    
    
    
    // query Leads using REST HttpPost
    
    public static void querybody(String contenturl,String title) {
    	System.out.println("\n_______________ contetnversion QUERY _______________");
        try {
 
            //Set up the HTTP objects needed to make the request.
            HttpClient httpClient = HttpClientBuilder.create().build();
 
            String uri = loginInstanceUrl+contenturl;
            System.out.println("Query URL: " + uri);
            HttpGet httpGet = new HttpGet(uri);
            System.out.println("oauthHeader2: " + oauthHeader);
            httpGet.addHeader(oauthHeader);
            httpGet.addHeader(prettyPrintHeader);
            
            httpGet.addHeader("Content-type", "application/octet-stream");
            // Make the request.
            HttpResponse response = httpClient.execute(httpGet);
            
            // Process the result
            int statusCode = response.getStatusLine().getStatusCode();
            if (statusCode == 200) {
            	
                try {
                	// FileOutputStream fos = new FileOutputStream("D:\\comp.zip");
                	 
                	 
                	 HttpEntity myEntity = response.getEntity();
                	 InputStream fis = myEntity.getContent(); 
                	 ZipEntry zipEntry = new ZipEntry(title);
                     zipOut.putNextEntry(zipEntry);
                     byte[] bytes = new byte[1024];
                     int length;
                    // fis.o
                     while((length = fis.read(bytes)) >= 0) {
                         zipOut.write(bytes, 0, length);
                     }
                     System.out.println("zipOut"+zipOut.toString()); 
                    
                     fis.close();
                     
                   //  fos.close();
                     //byte[] bytes1 = baos.toByteArray();
                   // String encodedBase64 = new String(Base64.getEncoder().encodeToString(bytes1));
                   /* System.out.printf("SHA-256 Tree Hash = %s\n", baos.size());
                    long zipsize= baos.size();
                    ByteArrayInputStream inStream = new ByteArrayInputStream(baos.toByteArray());
                    try {

                        byte[] treeHash =  computeSHA256TreeHash(inStream, zipsize);;
                        System.out.printf("SHA-256 Tree Hash = %s\n", toHex(treeHash));

                    } catch (IOException ioe) {
                        System.err.format("Exception when reading from file %s: %s",
                                ioe.getMessage());
                        System.exit(-1);

                    } catch (NoSuchAlgorithmException nsae) {
                        System.err.format("Cannot locate MessageDigest algorithm for SHA-256: %s",
                                nsae.getMessage());
                        System.exit(-1);
                    }
                   
                  System.out.println("JSON result of Query:\n" + baos.size());*/
                  //createcontentversion(encodedBase64);
                    
                                        //JSONObject json = new JSONObject(response_string);
                   // System.out.println("JSON result of Query:\n" + json.toString(1));
                   // JSONArray j = json.getJSONArray("records");
                   
                } catch (JSONException je) {
                    je.printStackTrace();
                }
            } else {
                //System.out.println("Query was unsuccessful. Status code returned is " + statusCode);
                //System.out.println("An error has occured. Http status: " + response.getStatusLine().getStatusCode());
                System.out.println(getBody(response.getEntity().getContent()));
                System.exit(-1);
            }
        } catch (IOException ioe) {
            ioe.printStackTrace();
        } catch (NullPointerException npe) {
            npe.printStackTrace();
        }
        
    }
 
    public static void createcontentversion(String Zipdata) {
    	 String uri = loginInstanceUrl+"/services/data/v39.0/sobjects/Attachment";
    	
    	 HttpClient httpClient = HttpClientBuilder.create().build();
    	    HttpPost httpPost = new HttpPost(uri);
    	    httpPost.setHeader("Content-type", "application/json");
    	  
    	    httpPost.addHeader(oauthHeader);
    	    try {
    	    	JSONObject obj = new JSONObject();

    	        obj.put("Name",requestname+".zip");
    	        obj.put("Body",Zipdata);
    	        obj.put("parentid",requestid);
    	       

    	     
    	        StringWriter out = new StringWriter();
    	        obj.valueToString(obj);
    	        String jsonstring  = obj.toString();
    	        //obj.writeJSONString(out);
    	        
    	       
    	        StringEntity stringEntity = new StringEntity(jsonstring);
    	        httpPost.getRequestLine();
    	        httpPost.setEntity(stringEntity);

    	        HttpResponse response =  httpClient.execute(httpPost);
    	        int statusCode = response.getStatusLine().getStatusCode();
    	        
    	        if (statusCode == 200) {
                	
                    try {
                    	
                        
                         System.out.println("zipOut"); 
                                            //JSONObject json = new JSONObject(response_string);
                       // System.out.println("JSON result of Query:\n" + json.toString(1));
                       // JSONArray j = json.getJSONArray("records");
                       
                    } catch (JSONException je) {
                        je.printStackTrace();
                    }
                } else {
                   // System.out.println("Query was unsuccessful. Status code returned is " + statusCode);
                   // System.out.println("An error has occured. Http status: " + response.getStatusLine().getStatusCode());
                    System.out.println(getBody(response.getEntity().getContent()));
                    System.exit(-1);
                }
     
    	        
    	    } catch (Exception e) {
    	        throw new RuntimeException(e);
    	    }
    }
 
    private static String getBody(InputStream inputStream) {
        String result = "";
        try {
            BufferedReader in = new BufferedReader(
                    new InputStreamReader(inputStream)
            );
            String inputLine;
            while ( (inputLine = in.readLine() ) != null ) {
                result += inputLine;
                result += "\n";
            }
            in.close();
        } catch (IOException ioe) {
            ioe.printStackTrace();
        }
        System.out.println("result" + result);
        return result;
    }
    
   
    
    
    /**
     * Compute the Hex representation of the SHA-256 tree hash for the specified
     * File
     * 
     * @param args
     *            args[0]: a file to compute a SHA-256 tree hash for
     */
  
    /**
     * Computes the SHA-256 tree hash for the given file
     * 
     * @param inputFile
     *            a File to compute the SHA-256 tree hash for
     * @return a byte[] containing the SHA-256 tree hash
     * @throws IOException
     *             Thrown if there's an issue reading the input file
     * @throws NoSuchAlgorithmException
     */
    public static byte[] computeSHA256TreeHash(ByteArrayInputStream fileStream, long numChunks) throws IOException,
            NoSuchAlgorithmException {
    	 System.out.printf("numChunks", numChunks);
       // byte[][] chunkSHA256Hashes = getChunkSHA256Hashes(fileStream,  numChunks);
    	 byte[][] chunkSHA256Hashes=null;
        return computeSHA256TreeHash(chunkSHA256Hashes);
    }

    /**
     * Computes a SHA256 checksum for each 1 MB chunk of the input file. This
     * includes the checksum for the last chunk even if it is smaller than 1 MB.
     * 
     * @param file
     *            A file to compute checksums on
     * @return a byte[][] containing the checksums of each 1 MB chunk
     * @throws IOException
     *             Thrown if there's an IOException when reading the file
     * @throws NoSuchAlgorithmException
     *             Thrown if SHA-256 MessageDigest can't be found
     */
    public static byte[][] getChunkSHA256Hashes(ByteArrayInputStream fileStream, long numChunks) throws IOException,
            NoSuchAlgorithmException {

        MessageDigest md = MessageDigest.getInstance("SHA-256");
        
        System.out.printf("numChunks", numChunks);
       // long numChunks = ''; // ONE_MB;
        if (numChunks % ONE_MB > 0) {
            numChunks++;
        }
        System.out.printf("numChunks", numChunks);
        if (numChunks == 0) {
            return new byte[][] { md.digest() };
        }

        byte[][] chunkSHA256Hashes = new byte[(int) numChunks][];
        //FileInputStream fileStream = null;

        try {
          //  fileStream = new FileInputStream(file);
            byte[] buff = new byte[ONE_MB];

            int bytesRead;
            int idx = 0;

            while ((bytesRead = fileStream.read(buff, 0, ONE_MB)) > 0) {
                md.reset();
                md.update(buff, 0, bytesRead);
                chunkSHA256Hashes[idx++] = md.digest();
            }

            return chunkSHA256Hashes;

        } finally {
            if (fileStream != null) {
                try {
                    fileStream.close();
                } catch (IOException ioe) {
                    System.err.printf("Exception while closing %s.\n %s", 
                            ioe.getMessage());
                }
            }
        }
    }

    /**
     * Computes the SHA-256 tree hash for the passed array of 1 MB chunk
     * checksums.
     * 
     * This method uses a pair of arrays to iteratively compute the tree hash
     * level by level. Each iteration takes two adjacent elements from the
     * previous level source array, computes the SHA-256 hash on their
     * concatenated value and places the result in the next level's destination
     * array. At the end of an iteration, the destination array becomes the
     * source array for the next level.
     * 
     * @param chunkSHA256Hashes
     *            An array of SHA-256 checksums
     * @return A byte[] containing the SHA-256 tree hash for the input chunks
     * @throws NoSuchAlgorithmException
     *             Thrown if SHA-256 MessageDigest can't be found
     */
    public static byte[] computeSHA256TreeHash(byte[][] chunkSHA256Hashes)
            throws NoSuchAlgorithmException {

        MessageDigest md = MessageDigest.getInstance("SHA-256");

        byte[][] prevLvlHashes = chunkSHA256Hashes;

        while (prevLvlHashes.length > 1) {

            int len = prevLvlHashes.length / 2;
            if (prevLvlHashes.length % 2 != 0) {
                len++;
            }

            byte[][] currLvlHashes = new byte[len][];

            int j = 0;
            for (int i = 0; i < prevLvlHashes.length; i = i + 2, j++) {

                // If there are at least two elements remaining
                if (prevLvlHashes.length - i > 1) {

                    // Calculate a digest of the concatenated nodes
                    md.reset();
                    md.update(prevLvlHashes[i]);
                    md.update(prevLvlHashes[i + 1]);
                    currLvlHashes[j] = md.digest();

                } else { // Take care of remaining odd chunk
                    currLvlHashes[j] = prevLvlHashes[i];
                }
            }

            prevLvlHashes = currLvlHashes;
        }

        return prevLvlHashes[0];
    }

    /**
     * Returns the hexadecimal representation of the input byte array
     * 
     * @param data
     *            a byte[] to convert to Hex characters
     * @return A String containing Hex characters
     */
    public static String toHex(byte[] data) {
        StringBuilder sb = new StringBuilder(data.length * 2);

        for (int i = 0; i < data.length; i++) {
            String hex = Integer.toHexString(data[i] & 0xFF);

            if (hex.length() == 1) {
                // Append leading zero.
                sb.append("0");
            }
            sb.append(hex);
        }
        return sb.toString().toLowerCase();
    }
}
